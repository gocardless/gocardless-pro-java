buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }
        jcenter()
        google()
        maven {
            url 'https://maven.google.com'
        }
    }

    dependencies {
        classpath 'ch.raffael.pegdown-doclet:pegdown-doclet:1.2.1'
    }
}

plugins {
    id "java"
    id "signing"
    id "maven-publish"
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
    id "com.diffplug.spotless" version "5.12.5"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8
group = 'com.gocardless'
version = '7.1.0'

apply plugin: 'ch.raffael.pegdown-doclet'

repositories {
    mavenCentral()
    maven { url 'https://plugins.gradle.org/m2/' }
    jcenter()
    google()
    maven {
        url 'https://maven.google.com'
    }
}

dependencies {
    implementation("com.squareup.okhttp3:okhttp:4.9.1")
    implementation 'com.google.code.gson:gson:2.8.7'
    implementation("com.google.guava:guava:30.1.1-jre")
    implementation 'org.slf4j:slf4j-api:1.7.32'
    implementation 'commons-codec:commons-codec:1.15'

    implementation('com.github.rholder:guava-retrying:2.0.0') {
      exclude group: 'com.google.guava', module: 'guava'
    }

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.assertj:assertj-core:3.19.0'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.9.1'
}

javadoc {
    options.memberLevel = JavadocMemberLevel.PUBLIC
    options.noTimestamp = true

    options.links = [
      'http://docs.oracle.com/javase/8/docs/api/'
    ]
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from tasks.javadoc.destinationDir
    classifier = 'javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId 'com.gocardless'
            artifactId 'gocardless-pro'

            from components.java
            artifacts = [jar, javadocJar, sourcesJar]

            pom {
                name.set('GoCardless Client')
                packaging 'jar'
                description.set('Client library for accessing the GoCardless API')
                url.set('http://developer.gocardless.com/')

                scm {
                    url.set('scm:git@github.com:gocardless/gocardless-pro-java.git')
                    connection.set('scm:git@github.com:gocardless/gocardless-pro-java.git')
                    developerConnection.set('scm:git@github.com:gocardless/gocardless-pro-java.git')
                }

                licenses {
                    license {
                        name.set('MIT')
                        url.set('http://www.opensource.org/licenses/mit-license.php')
                        distribution.set('repo')
                    }
                }

                developers {
                    developer {
                        name.set('GoCardless Ltd')
                        email.set('client-libraries@gocardless.com')
                    }
                }
            }
        }
    }

    repositories {
        maven {
            name = "OSSRH"

            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"

            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

nexusPublishing {
    repositories {
        sonatype {
            //only for users registered in Sonatype after 24 Feb 2021
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))

            username = System.getenv("MAVEN_USERNAME")
            password = System.getenv("MAVEN_PASSWORD")
        }
    }
}

spotless {
    java {
        importOrder()
        removeUnusedImports()
        eclipse().configFile("format.xml")
    }
}
