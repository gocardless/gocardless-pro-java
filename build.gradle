apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'

sourceCompatibility = 1.7
group = ' com.gocardless'
version = '4.7.0'

import groovy.swing.SwingBuilder

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'ch.raffael.pegdown-doclet:pegdown-doclet:1.2.1'
    }
}

apply plugin: 'ch.raffael.pegdown-doclet'

repositories {
    mavenCentral()
}

dependencies {
    compile 'com.squareup.okhttp:okhttp:2.7.5'
    compile 'com.google.code.gson:gson:2.8.0'
    compile 'com.google.guava:guava:20.0'
    compile 'org.slf4j:slf4j-api:1.7.21'
    compile 'commons-codec:commons-codec:1.11'

    compile('com.github.rholder:guava-retrying:2.0.0') {
      exclude group: 'com.google.guava', module: 'guava'
    }

    testCompile 'junit:junit:4.12'
    testCompile 'org.assertj:assertj-core:2.6.0'
    testCompile 'com.squareup.okhttp:mockwebserver:2.7.5'
}

javadoc {
    options.memberLevel = JavadocMemberLevel.PUBLIC
    options.noTimestamp = true

    options.links = [
      'http://docs.oracle.com/javase/7/docs/api/'
    ]
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from tasks.javadoc.destinationDir
    classifier = 'javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives jar

    archives javadocJar
    archives sourcesJar
}

signing {
    required { gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign }) {
        def keyId
        def keyPw
        // Gradle is running as a daemon - prompt user to enter passwords via popup UI (#770)
        new SwingBuilder().edt {
            dialog(modal: true, title: 'Enter credentials', alwaysOnTop: true, resizable: true,
                    locationRelativeTo: null, pack: true, show: true
            ) {
                vbox {
                    label(text: "Key Id:")
                    textField id: "keyIdText", input = textField()
                    label(text: "Password:")
                    textField id: "passwordText", input = passwordField()
                    button(defaultButton: true, text: 'OK', actionPerformed: {
                        keyId = keyIdText.text;
                        keyPw = passwordText.text;
                        dispose();
                    })
                }
            }
        }
        allprojects { ext."signing.keyId" = keyId }
        allprojects { ext."signing.password" = keyPw }
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            def username = project.hasProperty('sonatypeUsername') ? project.getProperty('sonatypeUsername') : ''
            def password = project.hasProperty('sonatypePassword') ? project.getProperty('sonatypePassword') : ''

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: username, password: password)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: username, password: password)
            }

            pom.project {
                name 'GoCardless Client'
                packaging 'jar'
                description 'Client library for accessing the GoCardless API'
                url 'http://developer.gocardless.com/'

                scm {
                    url 'scm:git@github.com:gocardless/gocardless-pro-java.git'
                    connection 'scm:git@github.com:gocardless/gocardless-pro-java.git'
                    developerConnection 'scm:git@github.com:gocardless/gocardless-pro-java.git'
                }

                licenses {
                    license {
                        name 'MIT'
                        url 'http://www.opensource.org/licenses/mit-license.php'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'matt-thomson'
                        name 'Matt Thomson'
                        email 'mattthomson@gocardless.com'
                    }
                }
            }
        }
    }
}
